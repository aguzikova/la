0.
Находясь в домашней директории, выпишите/склонируйте свой репозиторий la,
a если он уже выписан, то не забудьте стянуть(pull) изменения с удалённого
репозитория.
Создайте новую папку session_4, перейдите в неё.
Выполняя задания, коммитьте(и сразу пушайте в свой удалённый репозиторий)
свои изменения после каждого выполненного задания(или промежуточного
состояния, если вам это будет удобно) с соответствующим коммит-сообщением.
Перед началом выполнения каждого задания убедитесь, что находитесь в папке
session_4. Внимательно разберите задание прежде, чем взяться выполнять.

1.
Создайте файл names, в котором будет 5 строк (или больше) с произвольными
именами, на каждой строке по одному имени, не в алфавитном порядке.
Создайте файл tasks, в котором будут также построчно находиться
названия заданий, назовите их произвольно. Их должно быть столько же,
сколько имён.
Напишите скрипт assign.sh, который сначала выведет в файл workers.lst
построчно отсортированный по алфавиту (лексикографически) список имен
в формате:

[1]: Anastasia Guzikova [18]

где 1 - номер такой строки по порядку, Anastasia Guzikova - строка из файла
names, 18 - длина имени (строки, содержащей имя);

затем выведет на экран "Current tasks:" и список текущих заданий в файле tasks,
заменяя пробелы на символ подчеркивания в названиях;
затем сохранит в файл work.table таблицу, построчно назначающую задание
в формате:

Anastasia Guzikova=Error Handling

где Error Handling - название задания.
В первой строке полученного файла (до таблицы) должен выводиться
заголовок таблицы: "Assigned tasks:".

После таблицы:
Date: 11/30/2012 Time: 11:59:03

- дата и время составления таблицы.

В конце выполнения скрипта выведите на экран(!):

Assigning: DONE
Worker list: workers.lst
Assigned tasks table: work.table

Имена файлов workers.lst, work.table -- сделайте переменными,
которые можно было бы изменять в файле настроек settings.conf.

В начале скрипта добавьте многострочный комментарий с описанием его работы
(используйте here-document).

2.
Напишите скрипт prime_numbers.sh, который выводит
список простых чисел <= заданного числа.
Скрипт должен иметь опции:
-f сохранять результат работы в указанный файл;
-h выводить справку с описанием самой программы и её опций;
-v verbose mode включен;
-n число, до которого считаем; обязательный параметр, если он не указан,
скрипт должен завершаться с ошибкой и соответствующим сообщением;
-N тоже самое, что -n;

В скрипте должны быть функции:
a) usage - без параметров - печатает справку
b) main - без параметров - основная функция, которая печатает
список простых чисел <= $number (или переменной с другим именем) в
stdout(&1).
c) is_prime - принимает один параметр (число) - возвращает является ли число
простым (return 0 - простое, return 1 - не является простым)

Если не указан параметр -n или -N, т.е. не задан обязательный параметр - число,
до которого считаем, скрипт должен завершиться с ошибкой и соответствующим
сообщением.
Также обработайте ситуацию, когда у нас нет возможности создать или писать
в файл, указанный в опции -f.

-v - verbose mode означает:
В этом режиме будут выводиться сообщения о числах, которые были отсеяны
из простых, в формате:

# 9 is not prime: divides evenly by 3

Если используется опция -f, то при verbose режиме (только) выводится сообщение,
в какой файл сохраняются результаты.
Формат может быть произвольным.

Пример работы скрипта:

inkerra:~$ ./prime_numbers.sh -vn 13 -f saved
saving results in file: saved
2 3 5 7 
# 9 is not prime: divides 3
11 13
inkerra:~$ cat saved
2 3 5 7
# 9 is not prime: divides 3
11 13

3.
Создайте папку log. В ней создайте файлы (можно пустые):
    old.log - и "сделайте" очень старым (старше месяца);
    messages.log - и поменяйте только atime на старше месяца;
    t1234.log.
Напишите задание, которое будет запускаться раз в неделю и удалять устаревшие
*.log файлы (которые никто не запрашивал уже более месяца) по всей домашней
директории.
Убедитесь, что первое выполнение задания удалило "устаревшие логи".
Сохраните строку с заданием в файле old_logs_cleaner.
