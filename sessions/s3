0.
Находясь в домашней директории, выпишите/склонируйте свой репозиторий la,
a если он уже выписан, то не забудьте стянуть(pull) изменения с удалённого
репозитория.
Создайте новую папку session_3, перейдите в неё.
Выполняя задания, коммитьте(и сразу пушайте в свой удалённый репозиторий)
свои изменения после каждого выполненного задания(или пункта задания, если вам
это будет удобно) с соответствующим коммит-сообщением.
Перед началом выполнения каждого задания убедитесь, что находитесь в папке
session_3.

1.
Текст программы на Python, которая аналогична следующей команде на shell:
    echo "Hello, $USER"'!'
может выглядеть следующим образом:
import os
print "Hello, %s!" % os.environ['USER']
Напишите скрипт hello.py, который можно будет вызвать по имени, т.е. 
из содержащей его директории его можно выполнить как:
./hello.py
с учётом того, что вы не знаете, какая версия питона установлена на
linux-машине, на которой скрипт будет выполняться.

2.
Создайте файл с настройками settings.conf:
export OS_USERNAME=admin
export OS_PASSWORD=nova
export OS_TENANT_NAME=openstack

c правами доступа rw-r--r--.
Напишите скрипт print_settings.sh, который будет выводить многострочное
сообщение в следующем формате:
########################################
## Default login/password: admin/nova
## tenant: openstack
########################################

где admin, nova, openstack - будут подставляться из файла с настройками.

3.
a) Напишите скрипт generate_broken_symlinks.sh, который создаёт в текущей
директории пустые файлы
    not_ver.file;
    ver0.file, ver1.file, ..., ver10.file;
создаёт по симлинку на каждый, добавляя ".lnk" к имени соответствующего файла
без суффикса "file" (ver1.lnk, например), затем удалять файлы ver*.

b) Модифицируйте скрипт так, чтобы он мог принимать
первым параметром путь до директории. При работе, если параметр задан,
создавать эту директорию(завершаться с ошибкой при неудаче) и
файлы и симлинки создавать в этой директории, а не в текущей,
если параметр не указан(т.е. по умолчанию) использовать текущую директорию.

c) Напишите скрипт fix_symlinks.sh, который будет находить сломанные ссылки и
удалять их. Для рабочих же ссылок выводить warning сообщение, если файл,
на который она ссылается, пустой.
По умолчанию, скрипт будет искать файлы в текущей директории,
но если вызвать скрипт с параметром, то в директории, указанной в первом
позиционном параметре.
Если параметр указан, но директории с таким именем не существует,
скрипт должен завершиться с ошибкой.
